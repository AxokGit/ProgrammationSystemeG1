<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="all_wb_finished" xml:space="preserve">
    <value>All backup works finished</value>
  </data>
  <data name="backup" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="backups_work_edit_menu" xml:space="preserve">
    <value>Backup works edit menu</value>
  </data>
  <data name="backups_work_run_menu" xml:space="preserve">
    <value>Backup work run menu</value>
  </data>
  <data name="backup_work_name" xml:space="preserve">
    <value>Backup Work name</value>
  </data>
  <data name="bytes" xml:space="preserve">
    <value>Bytes</value>
  </data>
  <data name="change_language" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="choose_backup_work_to_edit" xml:space="preserve">
    <value>Choose backup work to edit</value>
  </data>
  <data name="choose_backup_work_to_run" xml:space="preserve">
    <value>Choose backup work to run</value>
  </data>
  <data name="choose_log" xml:space="preserve">
    <value>Which log file would you like to open?</value>
  </data>
  <data name="copy_monitor" xml:space="preserve">
    <value>Copy monitor</value>
  </data>
  <data name="copy_status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="current_file_in_copy" xml:space="preserve">
    <value>Current file in copy</value>
  </data>
  <data name="define_work" xml:space="preserve">
    <value>Define backup job(s)</value>
  </data>
  <data name="done" xml:space="preserve">
    <value>DONE</value>
  </data>
  <data name="dst_folder" xml:space="preserve">
    <value>Destination folder</value>
  </data>
  <data name="dst_folder_backup_work" xml:space="preserve">
    <value>Destination folder of backup work</value>
  </data>
  <data name="err_empty_bw" xml:space="preserve">
    <value>Error, the backup work selected is not configured</value>
  </data>
  <data name="exit_menu" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="exit_program" xml:space="preserve">
    <value>Quit program</value>
  </data>
  <data name="file_opened" xml:space="preserve">
    <value>File opened</value>
  </data>
  <data name="finished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="folder_or_none" xml:space="preserve">
    <value>Folder (none to keep)</value>
  </data>
  <data name="here_your_options" xml:space="preserve">
    <value>Here are your options:</value>
  </data>
  <data name="languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="name_backup_work" xml:space="preserve">
    <value>Name of backup work</value>
  </data>
  <data name="name_or_none" xml:space="preserve">
    <value>Name (none to keep, 'r' to reset)</value>
  </data>
  <data name="number" xml:space="preserve">
    <value>No.</value>
  </data>
  <data name="number_or_all" xml:space="preserve">
    <value>No. ('a' for all)</value>
  </data>
  <data name="open_log_folder" xml:space="preserve">
    <value>Open log folder</value>
  </data>
  <data name="open_settings_dir" xml:space="preserve">
    <value>Open settigns directory</value>
  </data>
  <data name="remaining_file_number" xml:space="preserve">
    <value>Remaining file number</value>
  </data>
  <data name="running" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="run_work" xml:space="preserve">
    <value>Start backup job(s)</value>
  </data>
  <data name="saves" xml:space="preserve">
    <value>Saves</value>
  </data>
  <data name="select_language" xml:space="preserve">
    <value>Select language</value>
  </data>
  <data name="settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="sir" xml:space="preserve">
    <value>Sir</value>
  </data>
  <data name="src_folder" xml:space="preserve">
    <value>Source folder</value>
  </data>
  <data name="src_folder_backup_work" xml:space="preserve">
    <value>Source folder of backup work</value>
  </data>
  <data name="starting_copy" xml:space="preserve">
    <value>Copying</value>
  </data>
  <data name="start_time" xml:space="preserve">
    <value>Start time</value>
  </data>
  <data name="total_file_number" xml:space="preserve">
    <value>Total file number</value>
  </data>
  <data name="type_backup_work" xml:space="preserve">
    <value>Type of backup work</value>
  </data>
  <data name="type_complete" xml:space="preserve">
    <value>Complete</value>
  </data>
  <data name="type_differencial" xml:space="preserve">
    <value>Differencial</value>
  </data>
  <data name="type_enter_to_continue" xml:space="preserve">
    <value>Type ENTER to continue</value>
  </data>
  <data name="type_option_or_none" xml:space="preserve">
    <value>Type (1:complete / 2:differencial / none to keep)</value>
  </data>
  <data name="welcome_message" xml:space="preserve">
    <value>Welcome in EasySave</value>
  </data>
  <data name="world" xml:space="preserve">
    <value>World</value>
  </data>
</root>